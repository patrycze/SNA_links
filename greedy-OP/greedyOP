import csv

class Network:
    net = ''
    nodes = []
    edges = []
    closeness = 0
    transitivity = 0
    eigenvector = 0
    betweenness = 0
    coverage = 0
    listOfNetworksWithMaxCoverage = []

    def createRankingWithMaxCoverage(self, networkList):

        max = Network()
        max.coverage = 0

        for i in range(3, 16):
            for network in networkList:
                if (len(network.edges.listOfPairs)) == i:
                    if (float(max.coverage) < float(network.coverage)):
                        max = network
            self.listOfNetworksWithMaxCoverage.append(max)

    def createCsv(self, name, dataset):
        print('greedy-OP/results/' + name +'.csv')

        myFields = ['net', 'coverage', 'nodes', 'edges', 'links', 'closeness', 'transitivity', 'eigenvector', 'betweenness']
        myFile = open('greedy-OP/results/' + name + '.csv', 'w')
        with myFile:
            writer = csv.DictWriter(myFile, fieldnames=myFields)
            writer.writeheader();

        for data in dataset:
            print(data)


            myFile = open('greedy-OP/results/' + name +'.csv', 'a+')
            with myFile:
                writer = csv.DictWriter(myFile, fieldnames=myFields)
                writer.writerow({'net': data.net, 'coverage': data.coverage, 'nodes': data.nodes, 'edges': data.edges.listOfPairs, 'links': len(data.edges.listOfPairs), 'closeness': data.closeness, 'transitivity': data.transitivity,
                                 'eigenvector': data.eigenvector, 'betweenness': data.betweenness})

class Edges:
    listOfPairs = []

    def createList(self, rawList):
        self.listOfPairs = rawList.split(" ")


class Greedy:

    greedy = []
    pattern = []
    number = 0

    def createGreedySequences(self, network, networks):

        self.greedy = []

        self.pattern = network
        self.searchPatternInNetworksList(self.pattern, networks)

    def searchPatternInNetworksList(self, pattern, networks):

        max = pattern

        for network2 in networks:

            last = []

            if (len(network2.edges.listOfPairs) - len(pattern.edges.listOfPairs) == 1):
                if set(pattern.edges.listOfPairs).issubset(set(network2.edges.listOfPairs)):
                    if not any(d == pattern for d in self.greedy):

                        if(max.coverage < network2.coverage):
                            max = network2


        if(max.coverage != pattern.coverage):
            self.number = self.number + 1
            # print(self.number, pattern.edges.listOfPairs)
            pattern.number = self.number
            self.greedy.append({'number': self.number, 'net': pattern})
            last = network2.edges.listOfPairs
            self.pattern = max
            self.searchPatternInNetworksList(self.pattern, networks)

        # if (last != []):
        #     self.greedy.append(last)
    def createCsv(self, name, dataset):
        print('greedy-OP/results/' + name +'.csv')

        myFields = ['net', 'coverage', 'nodes', 'edges', 'links', 'closeness', 'transitivity', 'eigenvector', 'betweenness']
        myFile = open('greedy-OP/results/' + name + '.csv', 'w')
        with myFile:
            writer = csv.DictWriter(myFile, fieldnames=myFields)
            writer.writeheader();

        for dataset in dataset:
            for data in dataset.greedy:
                myFile = open('greedy-OP/results/' + name +'.csv', 'a+')
                with myFile:
                    writer = csv.DictWriter(myFile, fieldnames=myFields)
                    writer.writerow({'net': data.net, 'coverage': data.coverage, 'nodes': data.nodes, 'edges': data.edges.listOfPairs, 'links': len(data.edges.listOfPairs), 'closeness': data.closeness, 'transitivity': data.transitivity,
                                     'eigenvector': data.eigenvector, 'betweenness': data.betweenness})


listOfNetworks = []


with open('results/resultWithE.csv', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    for row in reader:
        tmpNetwors = Network()
        if row != []:
            tmpNetwors.net = row[0]
            tmpNetwors.coverage = row[1]
            tmpNetwors.betweenness = row[7]
            tmpNetwors.closeness = row[4]
            tmpNetwors.nodes = row[2]
            tmpNetwors.eigenvector = row[6]
            tmpNetwors.transitivity = row[5]
            tmpNetwors.number = 0

            edges = Edges()
            edges.createList(row[3][:-1])
            tmpNetwors.edges = edges

            listOfNetworks.append(tmpNetwors)

listOfGreedy = []

for l in listOfNetworks:
    greedy = Greedy()
    greedy.createGreedySequences(l, listOfNetworks)
    listOfGreedy.append(greedy)
    # print(greedy)

greedyToDisplay = []
greedyToDisplayAll = []

for l in listOfGreedy:
    for g in l.greedy:
        if(len(l.greedy) == 9):
            print(g['number'], g['net'].edges.listOfPairs)

networks = Network()
networks.createRankingWithMaxCoverage(listOfNetworks)

greedy = Greedy()
# for i in range(0, len(networks.listOfNetworksWithMaxCoverage)):
    # print(float(networks.listOfNetworksWithMaxCoverage[i+1].coverage) - float(networks.listOfNetworksWithMaxCoverage[i].coverage))

# networks.createCsv('listOfNetworksWithMaxCoverage', networks.listOfNetworksWithMaxCoverage)
# greedy.createCsv('greedyToDisplayAll', listOfGreedy)
