library(igraph)
setwd("C:/R_data/pnas_16")
steps = 10  					#number of simulation steps
pp = 0.15  					#propagation probability
percentage = 0.25				#number of seeds
network = 16					#network id
graph1 <- read.graph(paste(network,".txt",sep=""), format="edgelist")
nodes = vcount(graph1)
numberofseeds = round(nodes * percentage, digits = 0)
Sys.time()
infections = 0
for( i in 1:nodes )
{
V(graph1)[i]$infected = 0
V(graph1)[i]$used = 0
}
x=sample(nodes,numberofseeds)			#select random seeds
for( seeds in 1:numberofseeds ) 		#seeding process
{
V(graph1)[x[seeds]]$infected = 1
V(graph1)[x[seeds]]$stepinfected = 0
V(graph1)[x[seeds]]$used = 0
V(graph1)[x[seeds]]$color = "green"
plot(graph1, layout=layout.kamada.kawai,vertex.size=10)
}
for( s in 1:steps )
{
for( j in 1:nodes )
{
if( V(graph1)[j]$infected == 1 & V(graph1)[j]$used == 0 & V(graph1)[j]$stepinfected != s )
{
V(graph1)[j]$used = 1
neighborstab = neighbors(graph1, j, mode = c("all"))
if ( length(neighborstab) > 0 )
{
notinfected = array()
n = 0
for( i in 1:length(neighborstab) )
{
if ( V(graph1)[neighborstab[i]]$infected == 0 )
{
n = n + 1
notinfected[n] = neighborstab[i]
}
}
numberofneighbors <- length(notinfected)
if ( !is.na(notinfected[1]) )
{
for( k in 1:numberofneighbors )
{
if ( numberofneighbors >= 1 )
{
x <- runif(1)
if ( x <= pp )
{
V(graph1)[notinfected[k]]$color = "red"
V(graph1)[notinfected[k]]$infected = 1
V(graph1)[notinfected[k]]$used = 0
V(graph1)[notinfected[k]]$stepinfected = s
infections = infections + 1
plot(graph1, layout=layout.kamada.kawai,vertex.size=10)
}
}
}
}
}
}
}
print(infections)
}
print("Total coverage % (infections + seeds):")
print(100*(numberofseeds + infections)/nodes)
setwd("/Users/apple/Desktop/SNA_links/results")
data = read.csv('resultWithE.csv', header=FALSE,sep=",")
View(data)
View(data)
colnames(data)[1] = 'net'
colnames(data)[2] = 'coverage'
colnames(data)[3] = 'nodes'
colnames(data)[4] = 'links'
colnames(data)[5] = 'closeness'
colnames(data)[6] = 'transitivity'
colnames(data)[7] = 'eigenvector'
colnames(data)[8] = 'betweenness'
View(data)
View(data)
maxValue = apply(data, 2, max)
minValue = apply(data, 2, min)
data = as.data.frame(scale(data, center = minValue, scale = maxValue))
data = as.data.frame(scale(data, center = minValue, scale = maxValue-minValue))
maxValue = apply(data$coverage, 2, max)
minValue = apply(data$coverage, 2, min)
maxValue = apply(float(data$coverage), 2, max)
maxValue = apply(data, 2, max)
minValue = apply(data, 2, min)
data = as.data.frame(scale(data, center = minValue, scale = maxValue-minValue))
maxValue = as.data.frame(apply(data, 2, max))
View(maxValue)
View(maxValue)
maxValue = t(as.data.frame(apply(data, 2, max)))
View(maxValue)
View(maxValue)
maxValue = t(as.data.frame(apply(data, 2, max)))
minValue = t(as.data.frame(apply(data, 2, min)))
data = as.data.frame(scale(data, center = minValue, scale = maxValue-minValue))
View(maxValue)
View(maxValue)
View(minValue)
View(minValue)
View(data)
View(data)
View(minValue)
View(minValue)
maxValue = as.data.frame(t(apply(data, 2, max)))
minValue = as.data.frame(t(apply(data, 2, min)))
data = as.data.frame(scale(data, center = minValue, scale = maxValue-minValue))
maxValue = as.data.frame(int(apply(data, 2, max)))
View(data)
View(data)
data$coverage = as.data.frame(scale(data$coverage, center = minValue, scale = maxValue-minValue))
minValue = as.data.frame(t(apply(data$coverage, 2, min)))
maxValue = (apply(data$coverage, 2, max))
minValue = (apply(as.numeric(data$coverage), 2, min))
minValue = apply(as.numeric(data$coverage), 2, min)
maxValue = apply(as.numeric(data$coverage, 2, max))
minValue = apply(as.numeric(data$coverage), 2, min))
maxValue = apply(as.numeric(data$coverage, 2, max))
maxValue = apply(as.numeric(data$coverage), 2, max))
maxValue = apply(as.numeric(data$coverage), 2, max)
minValue = apply(as.numeric(data$coverage), 2, min)
data = subset(data, select = c(coverage, nodes))
setwd("/Users/apple/Desktop/SNA_links/results")
data = read.csv('resultWithE.csv', header=FALSE,sep=",")
colnames(data)[1] = 'net'
colnames(data)[2] = 'coverage'
colnames(data)[3] = 'nodes'
colnames(data)[4] = 'links'
colnames(data)[5] = 'closeness'
colnames(data)[6] = 'transitivity'
colnames(data)[7] = 'eigenvector'
colnames(data)[8] = 'betweenness'
data = subset(data, select = c(coverage, nodes))
setwd("/Users/apple/Desktop/SNA_links/results")
data = read.csv('resultWithE.csv', header=FALSE,sep=",")
colnames(data)[1] = 'net'
colnames(data)[2] = 'coverage'
colnames(data)[3] = 'nodes'
colnames(data)[4] = 'links'
colnames(data)[5] = 'closeness'
colnames(data)[6] = 'transitivity'
colnames(data)[7] = 'eigenvector'
colnames(data)[8] = 'betweenness'
dataSubset = subset(data, select = c(coverage, nodes, closeness, transitivity, eigenvector, betweenness))
maxValue = (as.num(data$coverage, 2, max))
maxValue = apply(data$coverage, 2, max)
minValue = apply(data$coverage, 2, min)
maxValue = apply(dataSubset, 2, max)
minValue = apply(dataSubset, 2, min)
data$coverage = as.data.frame(scale(data$coverage, center = minValue, scale = maxValue-minValue))
data$coverage = as.data.frame(scale(dataSubset, center = minValue, scale = maxValue-minValue))
View(dataSubset)
View(dataSubset)
setwd("/Users/apple/Desktop/SNA_links/results")
data = read.csv('resultWithE.csv', header=FALSE,sep=",")
colnames(data)[1] = 'net'
colnames(data)[2] = 'coverage'
colnames(data)[3] = 'nodes'
colnames(data)[4] = 'links'
colnames(data)[5] = 'closeness'
colnames(data)[6] = 'transitivity'
colnames(data)[7] = 'eigenvector'
colnames(data)[8] = 'betweenness'
dataSubset = subset(data, select = c(coverage, nodes, closeness, transitivity, eigenvector, betweenness))
maxValue = apply(dataSubset, 2, max)
minValue = apply(dataSubset, 2, min)
dataSubset = as.data.frame(scale(dataSubset, center = minValue, scale = maxValue-minValue))
ind = sample(1:nrow(dataSubset),400)
ind = sample(1:nrow(dataSubset),60)
ind = sample(1:nrow(dataSubset),60)
trainDF = dataSubset[ind,]
testDF = dataSubset[-ind,]
predictorVars = allVars[!allVars%in%"coverage"]
allVars = colnames(dataSubset)
predictorVars = allVars[!allVars%in%"coverage"]
predictorVars = paste(predictorVars, collapse = "+")
form = as.formula(paste("coverage~", predictorVars, collapse = "+"))
library("neuralnet")
allVars = colnames(dataSubset)
predictorVars = allVars[!allVars%in%"coverage"]
predictorVars = paste(predictorVars, collapse = "+")
form = as.formula(paste("coverage~", predictorVars, collapse = "+"))
neuralModel = neuralnet(formula = form, hidden = c(4,2), linear.output = T, data = trainDF)
View(neuralModel)
View(neuralModel)
plot(neuralModel)
predictions = compute(neuralModel, testDF)
predictions = compute(neuralModel, testDF[,1:13])
predictions = compute(neuralModel, testDF[,1:6])
predictions = compute(neuralModel, testDF[,1:5])
View(predictions)
View(predictions)
predictions = as.data.frame(compute(neuralModel, testDF[,1:5]))
View(predictions)
View(predictions)
predictions = predictions$net.result * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage)
actualValues = testDF$coverage * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage)
actualValues = as.data.frame(testDF$coverage * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage))
View(actualValues)
View(actualValues)
View(testDF)
View(testDF)
testDF$predictions = actualValues
testDF$error = testDF$coverage - actualValues
View(data)
View(data)
View(testDF)
View(testDF)
ind = sample(1:nrow(dataSubset),79)
trainDF = dataSubset[ind,]
testDF = dataSubset[-ind,]
allVars = colnames(dataSubset)
predictorVars = allVars[!allVars%in%"coverage"]
predictorVars = paste(predictorVars, collapse = "+")
form = as.formula(paste("coverage~", predictorVars, collapse = "+"))
neuralModel = neuralnet(formula = form, hidden = c(4,2), linear.output = T, data = trainDF)
plot(neuralModel)
predictions = as.data.frame(compute(neuralModel, testDF[,1:5]))
predictions = predictions$net.result * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage)
actualValues = as.data.frame(testDF$coverage * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage))
testDF$predictions = actualValues
testDF$error = testDF$coverage - actualValues
setwd("/Users/apple/Desktop/SNA_links/results")
data = read.csv('resultWithE.csv', header=FALSE,sep=",")
data$meanInfections <- ave(data$coverage, data$net, data$len, FUN=mean) # okreslenie średniej wartości i przypisanie ich do tabeli
data$diff <- ave(data$V2, FUN=function(x) c(0, diff(x)))
data$len <- nchar(as.character(data$seed))
data1 <- subset(data, select = c(V2,V5,V6,V7,V8))
net4 <- as.data.frame(data[grep("^4", data$net),])
net5 <- as.data.frame(data[grep("^5", data$net),])
net6 <- as.data.frame(data[grep("^6", data$net),])
net4$meanCov <- ave(net4$coverage, net4$len, FUN=mean)
net5$meanCov <- ave(net5$coverage, net5$len, FUN=mean)
net6$meanCov <- ave(net6$coverage, net6$len, FUN=mean)
net4 <- subset(net4, select = c(seed, meanCov))
setwd("/Users/apple/Desktop/SNA_links/results")
data = read.csv('resultWithE.csv', header=FALSE,sep=",")
colnames(data)[1] = 'net'
colnames(data)[2] = 'coverage'
colnames(data)[3] = 'nodes'
colnames(data)[4] = 'links'
colnames(data)[5] = 'closeness'
colnames(data)[6] = 'transitivity'
colnames(data)[7] = 'eigenvector'
colnames(data)[8] = 'betweenness'
dataSubset = subset(data, select = c(coverage, nodes, closeness, transitivity, eigenvector, betweenness))
maxValue = apply(dataSubset, 2, max)
minValue = apply(dataSubset, 2, min)
dataSubset = as.data.frame(scale(dataSubset, center = minValue, scale = maxValue-minValue))
ind = sample(1:nrow(dataSubset),79)
trainDF = dataSubset[ind,]
testDF = dataSubset[-ind,]
allVars = colnames(dataSubset)
predictorVars = allVars[!allVars%in%"coverage"]
predictorVars = paste(predictorVars, collapse = "+")
form = as.formula(paste("coverage~", predictorVars, collapse = "+"))
neuralModel = neuralnet(formula = form, hidden = c(4,2), linear.output = T, data = trainDF)
plot(neuralModel)
predictions = as.data.frame(compute(neuralModel, testDF[,1:5]))
predictions = predictions$net.result * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage)
actualValues = as.data.frame(testDF$coverage * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage))
testDF$predictions = actualValues
testDF$error = testDF$coverage - actualValues
predictorVars = allVars[!allVars%in%"coverage,transitivity"]
predictorVars = allVars[!allVars%in%"coverage"]
predictorVars = predictorVars[!predictorVars%in%"transitivity"]
predictorVars = paste(predictorVars, collapse = "+")
form = as.formula(paste("coverage~", predictorVars, collapse = "+"))
neuralModel = neuralnet(formula = form, hidden = c(4,2), linear.output = T, data = trainDF)
plot(neuralModel)
predictions = as.data.frame(compute(neuralModel, testDF[,1:5]))
predictions = predictions$net.result * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage)
actualValues = as.data.frame(testDF$coverage * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage))
testDF$predictions = actualValues
testDF$error = testDF$coverage - actualValues
dataSubset = subset(data, select = c(coverage, nodes, closeness, eigenvector, betweenness))
maxValue = apply(dataSubset, 2, max)
minValue = apply(dataSubset, 2, min)
dataSubset = as.data.frame(scale(dataSubset, center = minValue, scale = maxValue-minValue))
ind = sample(1:nrow(dataSubset),79)
trainDF = dataSubset[ind,]
testDF = dataSubset[-ind,]
allVars = colnames(dataSubset)
predictorVars = allVars[!allVars%in%"coverage"]
predictorVars = predictorVars[!predictorVars%in%"transitivity"]
predictorVars = paste(predictorVars, collapse = "+")
form = as.formula(paste("coverage~", predictorVars, collapse = "+"))
neuralModel = neuralnet(formula = form, hidden = c(4,2), linear.output = T, data = trainDF)
plot(neuralModel)
predictions = as.data.frame(compute(neuralModel, testDF[,1:5]))
predictions = predictions$net.result * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage)
actualValues = as.data.frame(testDF$coverage * (max(testDF$coverage) - min(testDF$coverage))+min(testDF$coverage))
testDF$predictions = actualValues
testDF$error = testDF$coverage - actualValues
